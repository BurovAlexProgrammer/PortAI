<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>Пра сябе</value>
  </data>
  <data name="Contacts" xml:space="preserve">
    <value>Кантакты</value>
  </data>
  <data name="DownloadApp" xml:space="preserve">
    <value>Спампаваць дадатак</value>
  </data>
  <data name="GoToPage" xml:space="preserve">
    <value>Перайдзіце на старонку
</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Галоўная</value>
  </data>
  <data name="Mail" xml:space="preserve">
    <value>Пошты</value>
  </data>
  <data name="MyBiography" xml:space="preserve">
    <value>Мяне завуць Аляксей. Мне падабаецца праграмаваць і я ўвесь час развіваюся ў гэтым кірунку. Маё прыцягненне да праграмавання пачалося з урокаў інфарматыкі ў школе, потым я пайшоў вучыцца ў інстытут на факультэт інфарматыкі. &lt;br /&gt;</value>
  </data>
  <data name="MyProjectBlitzDemo1" xml:space="preserve">
    <value>Нядрэнная застаўка атрымалася падчас вывучэння рухавіка. Захоп кадра на Blitz3d вельмі складаны для сістэмы, але сучасныя ПК могуць гэта зрабіць. Больш за ўсё мне запомнілася распрацоўка календара з магчымасцю перагортвання па месяцах!</value>
  </data>
  <data name="MyProjectBlitzDemo2" xml:space="preserve">
    <value>Я вырашыў распрацаваць лабірынты, калі на працы было сумна. Я вырашыў пацешыць сваіх калегаў, але гэта атрымалася для мяне самым вясёлым, калі я зразумеў, што хутка пабудаваць карты на кансолі IDE, напісаць уласны рэдактар). Гэта быў цікавы досвед і добры вынік!</value>
  </data>
  <data name="MyProjectBlitzDemo3" xml:space="preserve">
    <value>Гэты праект з&amp;#39;явіўся, калі я хацеў павіншаваць сваю дзяўчыну з віртуальнай паштоўкай. Я вырашыў генераваць бясплатна квітнеючыя кветкі. Імітаванае падзенне пялёсткаў з дапамогай кантролера (ручной генератар часціц). Мне спадабалася распрацаваць сістэму росту сцябла і кветкі на аснове прынцыпу спадчыны і зменлівых характарыстык.!</value>
  </data>
  <data name="MyProjectBlitzDemo4" xml:space="preserve">
    <value>Гэта мая апошняя і самая вялікая распрацоўка рухавіка Blitz3D. Тут вынайдзена шмат цікавых рашэнняў, шкада, што рухавік састарэў. У гэтым праекце я распрацаваў змену дня і ночы, сістэму росту раслін і ўрадлівасці глебы, LOD здалёк, выкарыстанне шэйдараў і многае іншае!</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Тэлефон</value>
  </data>
  <data name="Portfolio" xml:space="preserve">
    <value>Партфель</value>
  </data>
  <data name="RestAPIDemo1" xml:space="preserve">
    <value>Мне стала цікава паспрабаваць RestAPI, я выбраў тэму - Пошук фільмаў. Таму што ясна. У гэтым праекце я выкарыстаў шмат новых для мяне тэхналогій, гэта: прамежкавае праграмнае забеспячэнне, загрузка, лакалізацыя (асаблівая падзяка распрацоўшчыкам &lt;a href = 'https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager#review-details'&gt; убудова &lt;/a&gt;), шматпаточная загрузка калекцыі фільмаў. Я выкарыстаў tmdb api, ён мае абмежаванне (1 запыт змяшчае максімум 30 фільмаў), выкарыстанне шматструменнасці значна скараціла час загрузкі.</value>
  </data>
  <data name="ShowMail" xml:space="preserve">
    <value>Паказаць лісты</value>
  </data>
  <data name="ShowPhone" xml:space="preserve">
    <value>Тэлефон</value>
  </data>
</root>