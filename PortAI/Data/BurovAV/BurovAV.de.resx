<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>ÜbER MICH</value>
  </data>
  <data name="Contacts" xml:space="preserve">
    <value>Kontakte</value>
  </data>
  <data name="DownloadApp" xml:space="preserve">
    <value>App herunterladen</value>
  </data>
  <data name="GoToPage" xml:space="preserve">
    <value>Gehe zur Seite</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Privat</value>
  </data>
  <data name="Mail" xml:space="preserve">
    <value>E-Mail</value>
  </data>
  <data name="MyBiography" xml:space="preserve">
    <value>Ich heiße Aleksey. Ich programmiere gerne und entwickle mich ständig in diese Richtung. Meine Anziehungskraft für das Programmieren begann mit dem Informatikunterricht in der Schule, dann studierte ich am Institut der Fakultät für Informatik. &lt;br /&gt;</value>
  </data>
  <data name="MyProjectBlitzDemo1" xml:space="preserve">
    <value>Ein guter Bildschirmschoner stellte sich zum Zeitpunkt des Studiums des Motors heraus. Das Aufnehmen eines Frames auf Blitz3d ist für das System sehr stressig, aber moderne PCs können dies. Am allermeisten erinnere ich mich an die Entwicklung eines Kalenders mit der Fähigkeit, die Monate umzudrehen.!</value>
  </data>
  <data name="MyProjectBlitzDemo2" xml:space="preserve">
    <value>Ich beschloss, Labyrinthe zu entwickeln, wenn es bei der Arbeit langweilig war. Ich habe beschlossen, meine Kollegen zu unterhalten, aber es hat mir am meisten Spaß gemacht, als mir klar wurde, dass es eine interessante Erfahrung und ein gutes Ergebnis war, schnell Karten auf der Konsolen-IDE zu erstellen, einen eigenen Editor zu schreiben.</value>
  </data>
  <data name="MyProjectBlitzDemo3" xml:space="preserve">
    <value>Dieses Projekt erschien, als ich meiner Freundin zu einer virtuellen Postkarte gratulieren wollte. Ich beschloss, frei blühende Blumen zu erzeugen. Simulierte den Fall der Blütenblätter durch die Steuerung (manueller Partikelgenerator). Ich habe gern ein System für das Wachstum von Stielen und Blüten entwickelt, das auf dem Prinzip des Erbes und der Veränderung der Eigenschaften basiert.!</value>
  </data>
  <data name="MyProjectBlitzDemo4" xml:space="preserve">
    <value>Dies ist meine letzte und größte Entwicklung an der Blitz3D-Engine. Hier wurden viele interessante Lösungen erfunden, schade, dass der Motor veraltet ist. In diesem Projekt entwickelte ich eine Veränderung von Tag und Nacht, ein System des Pflanzenwachstums und der Bodenfruchtbarkeit, LOD aus der Ferne, den Einsatz von Shadern und vieles mehr.!</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Telefon</value>
  </data>
  <data name="Portfolio" xml:space="preserve">
    <value>Portfolio</value>
  </data>
  <data name="RestAPIDemo1" xml:space="preserve">
    <value>Es wurde interessant für mich, RestAPI auszuprobieren. Ich wählte das Thema - Suche nach Filmen. Weil es klar ist. In diesem Projekt habe ich viele neue Technologien verwendet, darunter: Middleware, Bootstrap, Lokalisierung (ein besonderer Dank geht an die Entwickler des &lt;a href='https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager#review-details'&gt; plugin &lt;/a&gt;), Multithread-Download einer Sammlung von Filmen. Ich habe tmdb api verwendet, es gibt eine Einschränkung (1 Anfrage enthält maximal 30 Filme). Die Verwendung von Multithreading hat die Downloadzeit erheblich verkürzt.</value>
  </data>
  <data name="ShowMail" xml:space="preserve">
    <value>E-Mail anzeigen</value>
  </data>
  <data name="ShowPhone" xml:space="preserve">
    <value>Telefonnummer anzeigen</value>
  </data>
</root>