<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>OM MIG SJÄLV</value>
  </data>
  <data name="Contacts" xml:space="preserve">
    <value>Kontakter</value>
  </data>
  <data name="DownloadApp" xml:space="preserve">
    <value>Ladda ned appen</value>
  </data>
  <data name="GoToPage" xml:space="preserve">
    <value>Gå till sidan</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Hem
</value>
  </data>
  <data name="Mail" xml:space="preserve">
    <value>E-post</value>
  </data>
  <data name="MyBiography" xml:space="preserve">
    <value>Jag heter Aleksey. Jag gillar att programmera och utvecklas ständigt i denna riktning. Min attraktion för programmering började med datavetenskapslektioner i skolan, sedan gick jag för att studera vid institutet vid fakulteten för datavetenskap. &lt;br /&gt;</value>
  </data>
  <data name="MyProjectBlitzDemo1" xml:space="preserve">
    <value>En bra skärmsläckare visade sig när man studerade motorn. Att fånga en ram på Blitz3d är mycket stressande för systemet, men moderna datorer kan göra det. Mest av allt minns jag utvecklingen av en kalender med förmågan att vända över månaderna.!</value>
  </data>
  <data name="MyProjectBlitzDemo2" xml:space="preserve">
    <value>Jag bestämde mig för att utveckla labyrinter när det var tråkigt på jobbet. Jag bestämde mig för att underhålla mina kollegor, men det visade sig vara det roligaste för mig när jag insåg att för att snabbt bygga kartor på konsolen IDE, skriva din egen redaktör) Det var en intressant upplevelse och ett bra resultat!</value>
  </data>
  <data name="MyProjectBlitzDemo3" xml:space="preserve">
    <value>Detta projekt dök upp när jag ville gratulera min flickvän till ett virtuellt vykort. Jag bestämde mig för att generera gratis blommande blommor. Simulerade kronbladens fall av regulatorn (manuell partikelgenerator). Jag gillade att utveckla ett system med stam- och blomstertillväxt baserat på principen om arv och förändrade egenskaper.!</value>
  </data>
  <data name="MyProjectBlitzDemo4" xml:space="preserve">
    <value>Detta är min sista och största utveckling på Blitz3D-motorn. Många intressanta lösningar uppfanns här, det är synd att motorn är föråldrad. I detta projekt utvecklade jag en förändring av dag och natt, ett system med växttillväxt och jordfruktbarhet, LOD på avstånd, användning av skuggare och mycket mer.!</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Telefon</value>
  </data>
  <data name="Portfolio" xml:space="preserve">
    <value>Portfölj</value>
  </data>
  <data name="RestAPIDemo1" xml:space="preserve">
    <value>Det blev intressant för mig att prova RestAPI, jag valde ämnet - Sök efter filmer. För det är klart. I detta projekt använde jag många nya tekniker för mig, dessa var: middleware, bootstrap, lokalisering (särskilt tack till utvecklarna av &lt;a href='https://marketplace.visualstudio.com/items?itemName=TomEnglert.ResXManager#review-details'&gt; plugin &lt;/a&gt;), flera trådade nedladdningar av en samling filmer. Jag använde tmdb api, det har en begränsning (1 begäran innehåller högst 30 filmer) användningen av multithreading minskade nedladdningstiden avsevärt.</value>
  </data>
  <data name="ShowMail" xml:space="preserve">
    <value>Visa e-post</value>
  </data>
  <data name="ShowPhone" xml:space="preserve">
    <value>Visa telefon</value>
  </data>
</root>